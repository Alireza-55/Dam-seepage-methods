program laplace_solver
    implicit none

    integer, parameter :: nx = 54, ny = 17
    integer :: i, j, iter, max_iter
    real :: tol, error, h(nx, ny), h_new(nx, ny)
    real, parameter :: Pmin = 57.0, Pmax = 90.0

    max_iter = 1000
    tol = 1.0e-3

    h = 0.0
    do i = 1, nx
        h(i, 1) = Pmin
        h(i, ny) = Pmax
    end do
    do j = 1, ny
        h(1, j) = Pmin
        h(nx, j) = Pmax
    end do

    !(Explicit)
    iter = 0
    error = tol + 1
    do while (iter < max_iter .and. error > tol)
        error = 0.0
        h_new = h

        do i = 2, nx - 1
            do j = 2, ny - 1
                h_new(i, j) = 0.25 * (h(i + 1, j) + h(i - 1, j) + h(i, j + 1) + h(i, j - 1))
                error = max(error, abs(h_new(i, j) - h(i, j)))
            end do
        end do

        h = h_new
        iter = iter + 1
    end do

    print *, "Number of iterations (Explicit):", iter
    print *, "h(15,15) =", h(15,15)
    print *, "h(5,11) =", h(5,11)

    open(unit=10, file="output_explicit.txt", status="replace")
    do i = 1, nx
        write(10, '(54f8.2)') (h(i, j), j = 1, ny)
    end do
    close(10)

    h = 0.0
    do i = 1, nx
        h(i, 1) = Pmin
        h(i, ny) = Pmax
    end do
    do j = 1, ny
        h(1, j) = Pmin
        h(nx, j) = Pmax
    end do

    !(Semi-Implicit)
    iter = 0
    error = tol + 1
    do while (iter < max_iter .and. error > tol)
        error = 0.0

        do i = 2, nx - 1
            do j = 2, ny - 1
                h_new(i, j) = (h(i + 1, j) + h_new(i - 1, j) + h(i, j + 1) + h_new(i, j - 1)) / 4.0
                error = max(error, abs(h_new(i, j) - h(i, j)))
            end do
        end do

        h = h_new
        iter = iter + 1
    end do

    print *, "Number of iterations (Semi-Implicit):", iter
    print *, "h(15,15) =", h(15,15)
    print *, "h(5,11) =", h(5,11)

    open(unit=20, file="output_semi_implicit.txt", status="replace")
    do i = 1, nx
        write(20, '(54f8.2)') (h(i, j), j = 1, ny)
    end do
    close(20)

    h = 0.0
    do i = 1, nx
        h(i, 1) = Pmin
        h(i, ny) = Pmax
    end do
    do j = 1, ny
        h(1, j) = Pmin
        h(nx, j) = Pmax
    end do

    !(Implicit)
    iter = 0
    error = tol + 1
    do while (iter < max_iter .and. error > tol)
        error = 0.0

        do i = 2, nx - 1
            do j = 2, ny - 1
                h(i, j) = (h(i + 1, j) + h(i - 1, j) + h(i, j + 1) + h(i, j - 1)) / 4.0
                error = max(error, abs(h(i, j) - h_new(i, j)))
            end do
        end do

        iter = iter + 1
    end do

    print *, "Number of iterations (Implicit):", iter
    print *, "h(15,15) =", h(15,15)
    print *, "h(5,11) =", h(5,11)

    open(unit=30, file="output_implicit.txt", status="replace")
    do i = 1, nx
        write(30, '(54f8.2)') (h(i, j), j = 1, ny)
    end do
    close(30)

end program laplace_solver
